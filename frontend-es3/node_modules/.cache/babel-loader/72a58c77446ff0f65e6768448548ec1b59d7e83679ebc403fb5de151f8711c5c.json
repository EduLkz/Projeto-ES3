{"ast":null,"code":"var _jsxFileName = \"/mnt/3181cce5-74d7-427f-ba14-08accbd8ce5f/Code/ES3/frontend-es3/src/DriverLogged.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport QRCodeReader from './QRCodeReader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DriverLogged() {\n  _s();\n  const [insertCord, setInsertCord] = useState(true);\n  const [coords, setCoord] = useState([]);\n  const [inputCoord, setInputCoord] = useState('');\n  useEffect(() => {\n    console.log(coords);\n  }, [coords]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    setCoord([...coords, inputCoord]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setInsertCord(prevCheck => !prevCheck),\n      className: \"loginButtons\",\n      children: insertCord ? 'Ler QrCode' : 'Ler Coord'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: insertCord ? /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"coord\",\n          children: \"Coordenadas \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          htmlFor: \"coord\",\n          onChange: e => setInputCoord(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"loginButtons\",\n          onClick: handleSubmit,\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(QRCodeReader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), coords.map((c, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Coord\",\n        id: index,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [index, \" | \", c]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" - \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(DriverLogged, \"AVVUA5M9XfXLdZKSJ7AbC8/NcBs=\");\n_c = DriverLogged;\nvar _c;\n$RefreshReg$(_c, \"DriverLogged\");","map":{"version":3,"names":["React","useEffect","useState","QRCodeReader","jsxDEV","_jsxDEV","DriverLogged","_s","insertCord","setInsertCord","coords","setCoord","inputCoord","setInputCoord","console","log","handleSubmit","e","preventDefault","children","onClick","prevCheck","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","target","value","map","c","index","id","_c","$RefreshReg$"],"sources":["/mnt/3181cce5-74d7-427f-ba14-08accbd8ce5f/Code/ES3/frontend-es3/src/DriverLogged.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport QRCodeReader from './QRCodeReader'\n\nexport default function DriverLogged() {\n\n    const [insertCord, setInsertCord] = useState(true);\n    const [coords, setCoord] = useState([])\n\n    const [inputCoord, setInputCoord] = useState('')\n\n    useEffect(() => {\n      console.log(coords)\n    }, [coords])\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      setCoord([...coords, inputCoord])\n    }\n\n  return (\n    <div>\n        <button onClick={ () => setInsertCord(prevCheck => !prevCheck)} className='loginButtons'> \n          { (insertCord) ? 'Ler QrCode' : 'Ler Coord'} \n        </button>\n        <div>\n\n          { (insertCord) ? \n          <form>\n            <label htmlFor=\"coord\">Coordenadas </label>\n            <input htmlFor=\"coord\" onChange={(e) => setInputCoord(e.target.value)}/>\n            <button className='loginButtons' onClick={handleSubmit}>\n              Enviar\n            </button>\n          </form>\n          :\n            <QRCodeReader/>\n          }\n        </div>\n\n        {\n          coords.map((c, index) => {\n            return (\n              <div className='Coord' id={index}>\n                <p>{index} | {c}</p> <button > - </button>\n              </div>\n            )\n          })\n        }\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}